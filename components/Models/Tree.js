/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";

// Easily adjustable scale and position offset ranges
const TREE_SCALE_MIN = 0.2;
const TREE_SCALE_MAX = 0.6;

const TREE_OFFSET_X = 1.2; // max random offset in x
const TREE_OFFSET_Z = 1.2; // max random offset in z

export default function Tree(props) {
  const { nodes, materials } = useGLTF(`${process.env.NEXT_PUBLIC_CDN}games/Death Race/Tree.gltf`);

  // Random scale (range controlled by vars)
  const [randomScale] = useState(() => {
    const s = TREE_SCALE_MIN + Math.random() * (TREE_SCALE_MAX - TREE_SCALE_MIN);
    return [s, s, s];
  });
  // Mostly-upright random rotation
  const [randomRotation] = useState(() => [
    (Math.random() - 0.5) * 0.15, // x: small tilt
    Math.random() * Math.PI * 2,  // y: full rotation
    (Math.random() - 0.5) * 0.15  // z: small tilt
  ]);
  // Random x/z offset to break up grid
  const [randomOffset] = useState(() => [
    (Math.random() - 0.5) * TREE_OFFSET_X,
    0,
    (Math.random() - 0.5) * TREE_OFFSET_Z
  ]);

  // Merge random offset with any provided position
  const basePosition = props.position || [0, 0, 0];
  const position = [
    basePosition[0] + randomOffset[0],
    basePosition[1] + randomOffset[1],
    basePosition[2] + randomOffset[2],
  ];

  return (
    <group
      {...props}
      dispose={null}
      scale={randomScale}
      rotation={randomRotation}
      position={position}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["tree-spruce"].geometry}
        material={materials.color_main}
      />
    </group>
  );
}

useGLTF.preload(`${process.env.NEXT_PUBLIC_CDN}games/Death Race/Tree.gltf`);