/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 ..\models\Rock.glb --output output\Rock.js --keepnames --shadows 
*/


import React, { useEffect, useState } from 'react';
import { useGLTF } from '@react-three/drei';
const link = `${process.env.NEXT_PUBLIC_CDN}games/Assets/J-Toastie/Models/Rock.glb`;

function getRandomRotation() {
  // Random rotation in radians for x, y, z
  return [
    Math.random() * Math.PI * 2,
    Math.random() * Math.PI * 2,
    Math.random() * Math.PI * 2,
  ];
}


// Easily adjustable scale range
const ROCK_SCALE_MIN = 0.7;
const ROCK_SCALE_MAX = 20;

function getRandomScale() {
  // Random scale between ROCK_SCALE_MIN and ROCK_SCALE_MAX for each axis
  const sx = ROCK_SCALE_MIN + Math.random() * (ROCK_SCALE_MAX - ROCK_SCALE_MIN);
  const sy = ROCK_SCALE_MIN + Math.random() * (ROCK_SCALE_MAX - ROCK_SCALE_MIN);
  const sz = ROCK_SCALE_MIN + Math.random() * (ROCK_SCALE_MAX - ROCK_SCALE_MIN);
  return [sx, sy, sz];
}

export default function Rock(props) {
  const { nodes, materials } = useGLTF(link);

  const [randomRotation] = useState(getRandomRotation);
  const [randomScale] = useState(getRandomScale);

  return (
    <group
      {...props}
      dispose={null}
      rotation={randomRotation}
      scale={randomScale}
    >
      <mesh
        name="Rock_Cube"
        castShadow
        receiveShadow
        geometry={nodes.Rock_Cube.geometry}
        material={materials.Stone}
      />
    </group>
  );
}

useGLTF.preload(link);
